pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'b5804654-7184-42e2-ae01-e5d29fcdbb92', url: 'https://github.com/munshyn/SC_Assignment2.git']])
            }
        }

        stage('Build Docker Image') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    bat 'docker build -t opspanzu .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    withDockerRegistry(credentialsId: 'docker') {
                        bat 'docker tag opspanzu:latest husnymusharraf/opspanzu:latest'
                        bat 'docker push husnymusharraf/opspanzu:latest'
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    withKubeConfig(caCertificate: 'C:\\Users\\Lenovo\\.minikube\\ca.crt', clusterName: 'kubernetes-dashboard', contextName: '', credentialsId: 'kubernetes', namespace: 'kubernetes-dashboard', restrictKubeConfigAccess: false, serverUrl: 'http://127.0.0.1:60507/') {
                        bat 'kubectl apply -f deployment.yaml'
                        bat 'kubectl get deployment'
                        bat 'kubectl apply -f service.yaml'
                        bat 'kubectl get services'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def failedStage = currentBuild.result == 'FAILURE' ? findFailedStage() : null
                if (failedStage) {
                    jiraComment body: "Pipeline run completed with a failure in the '${failedStage}' stage.", issueKey: 'OPS-1'
                } else {
                    jiraComment body: 'Pipeline run completed successfully.', issueKey: 'OPS-1'
                }
            }
        }
    }
}

def findFailedStage() {
    def failedStage = null
    for (stage in currentBuild.rawBuild.getAction(org.jenkinsci.plugins.workflow.actions.StageAction).getStages()) {
        if (stage.getHasFailure()) {
            failedStage = stage.getName()
            break
        }
    }
    return failedStage
}
