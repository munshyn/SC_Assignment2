pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'b5804654-7184-42e2-ae01-e5d29fcdbb92', url: 'https://github.com/munshyn/SC_Assignment2.git']])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        bat 'docker build -t opspanzu .'
                    } catch (Exception e) {
                        createJiraIssue("Build Failure in Jenkins", "There was a failure in the Jenkins build for the project.")
                        throw e
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    try {
                        withDockerRegistry(credentialsId: 'docker') {
                            bat 'docker tag opspanzu:latest husnymusharraf/opspanzu:latest'
                            bat 'docker push husnymusharraf/opspanzu:latest'
                        }
                    } catch (Exception e) {
                        createJiraIssue("Docker Image Push Failure in Jenkins", "There was a failure in pushing the Docker image.")
                        throw e
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        withKubeConfig(caCertificate: 'C:\\Users\\Lenovo\\.minikube\\ca.crt', clusterName: 'kubernetes-dashboard', contextName: '', credentialsId: 'kubernetes', namespace: 'kubernetes-dashboard', restrictKubeConfigAccess: false, serverUrl: 'http://127.0.0.1:60507/') {
                            bat 'kubectl apply -f deployment.yaml'
                            bat 'kubectl get deployment'
                            bat 'kubectl apply -f service.yaml'
                            bat 'kubectl get services'
                        }
                    } catch (Exception e) {
                        createJiraIssue("Deployment Failure in Jenkins", "There was a failure in deploying to Kubernetes.")
                        throw e
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                createJiraIssue("Pipeline Failure in Jenkins", "There was a failure in the Jenkins pipeline.")
            }
        }
    }
}

def createJiraIssue(summary, description) {
    def curlCommand = "curl -D- -u husnymusharraf:polo123456 -X POST --data \"{\\\"fields\\\":{\\\"project\\\":{\\\"key\\\":\\\"OPS\\\"},\\\"summary\\\":\\\"${summary}\\\",\\\"description\\\":\\\"${description}\\\",\\\"issuetype\\\":{\\\"name\\\":\\\"Task\\\"}}}\" -H \"Content-Type: application/json\" https://localhost:8082/rest/api/2/issue/"
    bat(curlCommand)
}